==627== Memcheck, a memory error detector
==627== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==627== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info
==627== Command: ./minishell
==627== Parent PID: 620
==627== 
==627== Invalid read of size 1
==627==    at 0x10BFC0: delete_quotes_value (quotes.c:23)
==627==    by 0x10AD47: expansion (expander.c:30)
==627==    by 0x108E9F: parsing (main.c:23)
==627==    by 0x108FC7: main (main.c:61)
==627==  Address 0x4b75f2c is 0 bytes after a block of size 28 alloc'd
==627==    at 0x4885250: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-arm64-linux.so)
==627==    by 0x10E36F: ft_strndup (ft_strndup.c:19)
==627==    by 0x10DA6B: create_token (init_chain.c:36)
==627==    by 0x10C66B: token_blank (lexer.c:37)
==627==    by 0x108E83: parsing (main.c:17)
==627==    by 0x108FC7: main (main.c:61)
==627== 
==627== Conditional jump or move depends on uninitialised value(s)
==627==    at 0x10A558: execution (exec.c:29)
==627==    by 0x108FCF: main (main.c:62)
==627== 
==627== 
==627== FILE DESCRIPTORS: 4 open (3 std) at exit.
==627== Open file descriptor 3: /minishell/valgrind.log
==627==    <inherited from parent>
==627== 
==627== Open file descriptor 2: /dev/pts/0
==627==    <inherited from parent>
==627== 
==627== Open file descriptor 1: /dev/pts/0
==627==    <inherited from parent>
==627== 
==627== Open file descriptor 0: /dev/pts/0
==627==    <inherited from parent>
==627== 
==627== 
==627== HEAP SUMMARY:
==627==     in use at exit: 233,007 bytes in 253 blocks
==627==   total heap usage: 521 allocs, 268 frees, 250,159 bytes allocated
==627== 
==627== 48 bytes in 6 blocks are definitely lost in loss record 19 of 78
==627==    at 0x4885250: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-arm64-linux.so)
==627==    by 0x10E40F: ft_strjoin (ft_strjoin.c:25)
==627==    by 0x10A78F: strjoin_malloc (exec.c:85)
==627==    by 0x10A5EF: right_path (exec.c:46)
==627==    by 0x10A967: simple_exec (exec.c:135)
==627==    by 0x10A56F: execution (exec.c:32)
==627==    by 0x108FCF: main (main.c:62)
==627== 
==627== 66 bytes in 6 blocks are indirectly lost in loss record 20 of 78
==627==    at 0x4885250: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-arm64-linux.so)
==627==    by 0x10E53B: ft_extract_word (ft_split.c:23)
==627==    by 0x10E6F7: ft_split (ft_split.c:64)
==627==    by 0x10AB9B: create_path (executor_utils.c:50)
==627==    by 0x10A947: simple_exec (exec.c:134)
==627==    by 0x10A56F: execution (exec.c:32)
==627==    by 0x108FCF: main (main.c:62)
==627== 
==627== 122 (56 direct, 66 indirect) bytes in 1 blocks are definitely lost in loss record 25 of 78
==627==    at 0x4885250: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-arm64-linux.so)
==627==    by 0x10E697: ft_split (ft_split.c:56)
==627==    by 0x10AB9B: create_path (executor_utils.c:50)
==627==    by 0x10A947: simple_exec (exec.c:134)
==627==    by 0x10A56F: execution (exec.c:32)
==627==    by 0x108FCF: main (main.c:62)
==627== 
==627== 132 bytes in 6 blocks are definitely lost in loss record 26 of 78
==627==    at 0x4885250: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-arm64-linux.so)
==627==    by 0x10A75F: strjoin_malloc (exec.c:81)
==627==    by 0x10A5EF: right_path (exec.c:46)
==627==    by 0x10A967: simple_exec (exec.c:135)
==627==    by 0x10A56F: execution (exec.c:32)
==627==    by 0x108FCF: main (main.c:62)
==627== 
==627== LEAK SUMMARY:
==627==    definitely lost: 236 bytes in 13 blocks
==627==    indirectly lost: 66 bytes in 6 blocks
==627==      possibly lost: 0 bytes in 0 blocks
==627==    still reachable: 0 bytes in 0 blocks
==627==         suppressed: 232,705 bytes in 234 blocks
==627== 
==627== Use --track-origins=yes to see where uninitialised values come from
==627== For lists of detected and suppressed errors, rerun with: -s
==627== ERROR SUMMARY: 5 errors from 5 contexts (suppressed: 0 from 0)
